Version 4.0 HI-TECH Software Intermediate Code
"23 JSN_Sensor.c
[; ;JSN_Sensor.c: 23: static JSN_t *lastTrig;
[c E7144 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 .. ]
[n E7144 . A5 A4 A3 C5 C4 C3 C6 C7 B7 A0 A1 A2 C0 C1 C2 B4 B5 B6  ]
"28 ./JSN_Sensor.h
[; ;./JSN_Sensor.h: 28: typedef struct {
[s S979 `ui 1 `ui 1 `E7144 1 `E7144 1 ]
[n S979 . echoHighTime distance trigPin echoPin ]
"124 ./PIC16Xpress_DevBoard.h
[; ;./PIC16Xpress_DevBoard.h: 124: uint8_t SetPin(PinName_t pin, uint8_t io);
[v _SetPin `(uc ~T0 @X0 0 ef2`E7144`uc ]
"105 C:\Program Files\Microchip\xc8\v2.35\pic\include\c99\stdio.h
[; ;C:\Program Files\Microchip\xc8\v2.35\pic\include\c99\stdio.h: 105: int printf(const char *restrict, ...);
[v _printf `(i ~T0 @X0 0 ev`*Cuc ]
"132 ./PIC16Xpress_DevBoard.h
[; ;./PIC16Xpress_DevBoard.h: 132: uint8_t WritePin(PinName_t pin, uint8_t val);
[v _WritePin `(uc ~T0 @X0 0 ef2`E7144`uc ]
"45 ./FRT.h
[; ;./FRT.h: 45: unsigned long FRT_GetMicros(void);
[v _FRT_GetMicros `(ul ~T0 @X0 0 ef ]
[p mainexit ]
"120 ./PIC16Xpress_DevBoard.h
[; ;./PIC16Xpress_DevBoard.h: 120: void PIC16_Init(void);
[v _PIC16_Init `(v ~T0 @X0 0 ef ]
"30 ./FRT.h
[; ;./FRT.h: 30: unsigned long FRT_GetMillis(void);
[v _FRT_GetMillis `(ul ~T0 @X0 0 ef ]
"55 C:/Users/Jack/.mchp_packs/Microchip/PIC16F1xxxx_DFP/1.10.174/xc8\pic\include\proc\PIC16F18345.h
[; <" INDF0 equ 00h ;# ">
"75
[; <" INDF1 equ 01h ;# ">
"95
[; <" PCL equ 02h ;# ">
"115
[; <" STATUS equ 03h ;# ">
"178
[; <" FSR0L equ 04h ;# ">
"198
[; <" FSR0H equ 05h ;# ">
"222
[; <" FSR1L equ 06h ;# ">
"242
[; <" FSR1H equ 07h ;# ">
"262
[; <" BSR equ 08h ;# ">
"314
[; <" WREG equ 09h ;# ">
"334
[; <" PCLATH equ 0Ah ;# ">
"354
[; <" INTCON equ 0Bh ;# ">
"387
[; <" PORTA equ 0Ch ;# ">
"437
[; <" PORTB equ 0Dh ;# ">
"476
[; <" PORTC equ 0Eh ;# ">
"538
[; <" PIR0 equ 010h ;# ">
"571
[; <" PIR1 equ 011h ;# ">
"633
[; <" PIR2 equ 012h ;# ">
"695
[; <" PIR3 equ 013h ;# ">
"757
[; <" PIR4 equ 014h ;# ">
"819
[; <" TMR0L equ 015h ;# ">
"824
[; <" TMR0 equ 015h ;# ">
"957
[; <" TMR0H equ 016h ;# ">
"962
[; <" PR0 equ 016h ;# ">
"1111
[; <" T0CON0 equ 017h ;# ">
"1176
[; <" T0CON1 equ 018h ;# ">
"1253
[; <" TMR1 equ 019h ;# ">
"1260
[; <" TMR1L equ 019h ;# ">
"1280
[; <" TMR1H equ 01Ah ;# ">
"1300
[; <" T1CON equ 01Bh ;# ">
"1372
[; <" T1GCON equ 01Ch ;# ">
"1442
[; <" TMR2 equ 01Dh ;# ">
"1462
[; <" PR2 equ 01Eh ;# ">
"1482
[; <" T2CON equ 01Fh ;# ">
"1553
[; <" TRISA equ 08Ch ;# ">
"1598
[; <" TRISB equ 08Dh ;# ">
"1637
[; <" TRISC equ 08Eh ;# ">
"1699
[; <" PIE0 equ 090h ;# ">
"1732
[; <" PIE1 equ 091h ;# ">
"1794
[; <" PIE2 equ 092h ;# ">
"1856
[; <" PIE3 equ 093h ;# ">
"1918
[; <" PIE4 equ 094h ;# ">
"1980
[; <" WDTCON equ 097h ;# ">
"2039
[; <" ADRES equ 09Bh ;# ">
"2046
[; <" ADRESL equ 09Bh ;# ">
"2066
[; <" ADRESH equ 09Ch ;# ">
"2086
[; <" ADCON0 equ 09Dh ;# ">
"2172
[; <" ADCON1 equ 09Eh ;# ">
"2244
[; <" ADACT equ 09Fh ;# ">
"2296
[; <" LATA equ 010Ch ;# ">
"2341
[; <" LATB equ 010Dh ;# ">
"2380
[; <" LATC equ 010Eh ;# ">
"2442
[; <" CM1CON0 equ 0111h ;# ">
"2494
[; <" CM1CON1 equ 0112h ;# ">
"2570
[; <" CM2CON0 equ 0113h ;# ">
"2622
[; <" CM2CON1 equ 0114h ;# ">
"2698
[; <" CMOUT equ 0115h ;# ">
"2724
[; <" BORCON equ 0116h ;# ">
"2751
[; <" FVRCON equ 0117h ;# ">
"2827
[; <" DACCON0 equ 0118h ;# ">
"2883
[; <" DACCON1 equ 0119h ;# ">
"2935
[; <" ANSELA equ 018Ch ;# ">
"2980
[; <" ANSELB equ 018Dh ;# ">
"3019
[; <" ANSELC equ 018Eh ;# ">
"3081
[; <" VREGCON equ 0197h ;# ">
"3102
[; <" RC1REG equ 0199h ;# ">
"3107
[; <" RCREG equ 0199h ;# ">
"3111
[; <" RCREG1 equ 0199h ;# ">
"3156
[; <" TX1REG equ 019Ah ;# ">
"3161
[; <" TXREG1 equ 019Ah ;# ">
"3165
[; <" TXREG equ 019Ah ;# ">
"3210
[; <" SP1BRG equ 019Bh ;# ">
"3217
[; <" SP1BRGL equ 019Bh ;# ">
"3222
[; <" SPBRG equ 019Bh ;# ">
"3226
[; <" SPBRG1 equ 019Bh ;# ">
"3230
[; <" SPBRGL equ 019Bh ;# ">
"3287
[; <" SP1BRGH equ 019Ch ;# ">
"3292
[; <" SPBRGH equ 019Ch ;# ">
"3296
[; <" SPBRGH1 equ 019Ch ;# ">
"3341
[; <" RC1STA equ 019Dh ;# ">
"3346
[; <" RCSTA1 equ 019Dh ;# ">
"3350
[; <" RCSTA equ 019Dh ;# ">
"3521
[; <" TX1STA equ 019Eh ;# ">
"3526
[; <" TXSTA1 equ 019Eh ;# ">
"3530
[; <" TXSTA equ 019Eh ;# ">
"3701
[; <" BAUD1CON equ 019Fh ;# ">
"3706
[; <" BAUDCON1 equ 019Fh ;# ">
"3710
[; <" BAUDCTL1 equ 019Fh ;# ">
"3714
[; <" BAUDCON equ 019Fh ;# ">
"3718
[; <" BAUDCTL equ 019Fh ;# ">
"3947
[; <" WPUA equ 020Ch ;# ">
"3997
[; <" WPUB equ 020Dh ;# ">
"4036
[; <" WPUC equ 020Eh ;# ">
"4098
[; <" SSP1BUF equ 0211h ;# ">
"4103
[; <" SSPBUF equ 0211h ;# ">
"4352
[; <" SSP1ADD equ 0212h ;# ">
"4357
[; <" SSPADD equ 0212h ;# ">
"4606
[; <" SSP1MSK equ 0213h ;# ">
"4611
[; <" SSPMSK equ 0213h ;# ">
"4860
[; <" SSP1STAT equ 0214h ;# ">
"4865
[; <" SSPSTAT equ 0214h ;# ">
"4982
[; <" SSP1CON1 equ 0215h ;# ">
"4987
[; <" SSPCON equ 0215h ;# ">
"4991
[; <" SSPCON1 equ 0215h ;# ">
"4995
[; <" SSP1CON equ 0215h ;# ">
"5252
[; <" SSP1CON2 equ 0216h ;# ">
"5257
[; <" SSPCON2 equ 0216h ;# ">
"5374
[; <" SSP1CON3 equ 0217h ;# ">
"5379
[; <" SSPCON3 equ 0217h ;# ">
"5496
[; <" SSP2BUF equ 0219h ;# ">
"5624
[; <" SSP2ADD equ 021Ah ;# ">
"5752
[; <" SSP2MSK equ 021Bh ;# ">
"5880
[; <" SSP2STAT equ 021Ch ;# ">
"5942
[; <" SSP2CON1 equ 021Dh ;# ">
"5947
[; <" SSP2CON equ 021Dh ;# ">
"6080
[; <" SSP2CON2 equ 021Eh ;# ">
"6142
[; <" SSP2CON3 equ 021Fh ;# ">
"6204
[; <" ODCONA equ 028Ch ;# ">
"6249
[; <" ODCONB equ 028Dh ;# ">
"6288
[; <" ODCONC equ 028Eh ;# ">
"6350
[; <" CCPR1 equ 0291h ;# ">
"6357
[; <" CCPR1L equ 0291h ;# ">
"6377
[; <" CCPR1H equ 0292h ;# ">
"6397
[; <" CCP1CON equ 0293h ;# ">
"6462
[; <" CCP1CAP equ 0294h ;# ">
"6508
[; <" CCPR2 equ 0295h ;# ">
"6515
[; <" CCPR2L equ 0295h ;# ">
"6535
[; <" CCPR2H equ 0296h ;# ">
"6555
[; <" CCP2CON equ 0297h ;# ">
"6620
[; <" CCP2CAP equ 0298h ;# ">
"6666
[; <" CCPTMRS equ 029Fh ;# ">
"6754
[; <" SLRCONA equ 030Ch ;# ">
"6799
[; <" SLRCONB equ 030Dh ;# ">
"6838
[; <" SLRCONC equ 030Eh ;# ">
"6900
[; <" CCPR3 equ 0311h ;# ">
"6907
[; <" CCPR3L equ 0311h ;# ">
"6927
[; <" CCPR3H equ 0312h ;# ">
"6947
[; <" CCP3CON equ 0313h ;# ">
"7012
[; <" CCP3CAP equ 0314h ;# ">
"7058
[; <" CCPR4 equ 0315h ;# ">
"7065
[; <" CCPR4L equ 0315h ;# ">
"7085
[; <" CCPR4H equ 0316h ;# ">
"7105
[; <" CCP4CON equ 0317h ;# ">
"7170
[; <" CCP4CAP equ 0318h ;# ">
"7216
[; <" INLVLA equ 038Ch ;# ">
"7266
[; <" INLVLB equ 038Dh ;# ">
"7305
[; <" INLVLC equ 038Eh ;# ">
"7367
[; <" IOCAP equ 0391h ;# ">
"7417
[; <" IOCAN equ 0392h ;# ">
"7467
[; <" IOCAF equ 0393h ;# ">
"7517
[; <" IOCBP equ 0394h ;# ">
"7556
[; <" IOCBN equ 0395h ;# ">
"7595
[; <" IOCBF equ 0396h ;# ">
"7634
[; <" IOCCP equ 0397h ;# ">
"7696
[; <" IOCCN equ 0398h ;# ">
"7758
[; <" IOCCF equ 0399h ;# ">
"7820
[; <" CLKRCON equ 039Ah ;# ">
"7885
[; <" MDCON equ 039Ch ;# ">
"7925
[; <" MDSRC equ 039Dh ;# ">
"7971
[; <" MDCARH equ 039Eh ;# ">
"8030
[; <" MDCARL equ 039Fh ;# ">
"8089
[; <" TMR3 equ 0411h ;# ">
"8096
[; <" TMR3L equ 0411h ;# ">
"8116
[; <" TMR3H equ 0412h ;# ">
"8136
[; <" T3CON equ 0413h ;# ">
"8208
[; <" T3GCON equ 0414h ;# ">
"8278
[; <" TMR4 equ 0415h ;# ">
"8298
[; <" PR4 equ 0416h ;# ">
"8318
[; <" T4CON equ 0417h ;# ">
"8389
[; <" TMR5 equ 0418h ;# ">
"8396
[; <" TMR5L equ 0418h ;# ">
"8416
[; <" TMR5H equ 0419h ;# ">
"8436
[; <" T5CON equ 041Ah ;# ">
"8508
[; <" T5GCON equ 041Bh ;# ">
"8578
[; <" TMR6 equ 041Ch ;# ">
"8598
[; <" PR6 equ 041Dh ;# ">
"8618
[; <" T6CON equ 041Eh ;# ">
"8689
[; <" CCDCON equ 041Fh ;# ">
"8732
[; <" NCO1ACC equ 0498h ;# ">
"8739
[; <" NCO1ACCL equ 0498h ;# ">
"8759
[; <" NCO1ACCH equ 0499h ;# ">
"8779
[; <" NCO1ACCU equ 049Ah ;# ">
"8801
[; <" NCO1INC equ 049Bh ;# ">
"8808
[; <" NCO1INCL equ 049Bh ;# ">
"8828
[; <" NCO1INCH equ 049Ch ;# ">
"8848
[; <" NCO1INCU equ 049Dh ;# ">
"8868
[; <" NCO1CON equ 049Eh ;# ">
"8908
[; <" NCO1CLK equ 049Fh ;# ">
"8935
[; <" PWM5DCL equ 0617h ;# ">
"8971
[; <" PWM5DCH equ 0618h ;# ">
"9041
[; <" PWM5CON equ 0619h ;# ">
"9046
[; <" PWM5CON0 equ 0619h ;# ">
"9107
[; <" PWM6DCL equ 061Ah ;# ">
"9143
[; <" PWM6DCH equ 061Bh ;# ">
"9213
[; <" PWM6CON equ 061Ch ;# ">
"9218
[; <" PWM6CON0 equ 061Ch ;# ">
"9279
[; <" PWMTMRS equ 061Fh ;# ">
"9331
[; <" CWG1CLKCON equ 0691h ;# ">
"9359
[; <" CWG1DAT equ 0692h ;# ">
"9405
[; <" CWG1DBR equ 0693h ;# ">
"9509
[; <" CWG1DBF equ 0694h ;# ">
"9613
[; <" CWG1CON0 equ 0695h ;# ">
"9714
[; <" CWG1CON1 equ 0696h ;# ">
"9792
[; <" CWG1AS0 equ 0697h ;# ">
"9912
[; <" CWG1AS1 equ 0698h ;# ">
"9956
[; <" CWG1STR equ 0699h ;# ">
"10068
[; <" CWG2CLKCON equ 0711h ;# ">
"10096
[; <" CWG2DAT equ 0712h ;# ">
"10142
[; <" CWG2DBR equ 0713h ;# ">
"10246
[; <" CWG2DBF equ 0714h ;# ">
"10350
[; <" CWG2CON0 equ 0715h ;# ">
"10451
[; <" CWG2CON1 equ 0716h ;# ">
"10529
[; <" CWG2AS0 equ 0717h ;# ">
"10649
[; <" CWG2AS1 equ 0718h ;# ">
"10693
[; <" CWG2STR equ 0719h ;# ">
"10805
[; <" NVMADR equ 0891h ;# ">
"10810
[; <" EEADR equ 0891h ;# ">
"10814
[; <" PMADR equ 0891h ;# ">
"10821
[; <" NVMADRL equ 0891h ;# ">
"10826
[; <" EEADRL equ 0891h ;# ">
"10830
[; <" PMADRL equ 0891h ;# ">
"11073
[; <" NVMADRH equ 0892h ;# ">
"11078
[; <" EEADRH equ 0892h ;# ">
"11082
[; <" PMADRH equ 0892h ;# ">
"11307
[; <" NVMDAT equ 0893h ;# ">
"11312
[; <" EEDAT equ 0893h ;# ">
"11316
[; <" PMDAT equ 0893h ;# ">
"11323
[; <" NVMDATL equ 0893h ;# ">
"11328
[; <" EEDATL equ 0893h ;# ">
"11332
[; <" PMDATL equ 0893h ;# ">
"11575
[; <" NVMDATH equ 0894h ;# ">
"11580
[; <" EEDATH equ 0894h ;# ">
"11584
[; <" PMDATH equ 0894h ;# ">
"11791
[; <" NVMCON1 equ 0895h ;# ">
"11796
[; <" EECON1 equ 0895h ;# ">
"11800
[; <" PMCON1 equ 0895h ;# ">
"11980
[; <" NVMCON2 equ 0896h ;# ">
"11985
[; <" EECON2 equ 0896h ;# ">
"11989
[; <" PMCON2 equ 0896h ;# ">
"12082
[; <" PCON0 equ 089Bh ;# ">
"12139
[; <" PMD0 equ 0911h ;# ">
"12184
[; <" PMD1 equ 0912h ;# ">
"12246
[; <" PMD2 equ 0913h ;# ">
"12286
[; <" PMD3 equ 0914h ;# ">
"12348
[; <" PMD4 equ 0915h ;# ">
"12382
[; <" PMD5 equ 0916h ;# ">
"12426
[; <" CPUDOZE equ 0918h ;# ">
"12491
[; <" OSCCON1 equ 0919h ;# ">
"12561
[; <" OSCCON2 equ 091Ah ;# ">
"12631
[; <" OSCCON3 equ 091Bh ;# ">
"12676
[; <" OSCSTAT1 equ 091Ch ;# ">
"12728
[; <" OSCEN equ 091Dh ;# ">
"12774
[; <" OSCTUNE equ 091Eh ;# ">
"12832
[; <" OSCFRQ equ 091Fh ;# ">
"12878
[; <" PPSLOCK equ 0E0Fh ;# ">
"12898
[; <" INTPPS equ 0E10h ;# ">
"12950
[; <" T0CKIPPS equ 0E11h ;# ">
"13002
[; <" T1CKIPPS equ 0E12h ;# ">
"13054
[; <" T1GPPS equ 0E13h ;# ">
"13106
[; <" CCP1PPS equ 0E14h ;# ">
"13158
[; <" CCP2PPS equ 0E15h ;# ">
"13210
[; <" CCP3PPS equ 0E16h ;# ">
"13262
[; <" CCP4PPS equ 0E17h ;# ">
"13314
[; <" CWG1PPS equ 0E18h ;# ">
"13366
[; <" CWG2PPS equ 0E19h ;# ">
"13418
[; <" MDCIN1PPS equ 0E1Ah ;# ">
"13470
[; <" MDCIN2PPS equ 0E1Bh ;# ">
"13522
[; <" MDMINPPS equ 0E1Ch ;# ">
"13574
[; <" SSP2CLKPPS equ 0E1Dh ;# ">
"13626
[; <" SSP2DATPPS equ 0E1Eh ;# ">
"13678
[; <" SSP2SSPPS equ 0E1Fh ;# ">
"13730
[; <" SSP1CLKPPS equ 0E20h ;# ">
"13782
[; <" SSP1DATPPS equ 0E21h ;# ">
"13834
[; <" SSP1SSPPS equ 0E22h ;# ">
"13886
[; <" RXPPS equ 0E24h ;# ">
"13938
[; <" TXPPS equ 0E25h ;# ">
"13990
[; <" CLCIN0PPS equ 0E28h ;# ">
"14042
[; <" CLCIN1PPS equ 0E29h ;# ">
"14094
[; <" CLCIN2PPS equ 0E2Ah ;# ">
"14146
[; <" CLCIN3PPS equ 0E2Bh ;# ">
"14198
[; <" T3CKIPPS equ 0E2Ch ;# ">
"14218
[; <" T3GPPS equ 0E2Dh ;# ">
"14238
[; <" T5CKIPPS equ 0E2Eh ;# ">
"14258
[; <" T5GPPS equ 0E2Fh ;# ">
"14278
[; <" RA0PPS equ 0E90h ;# ">
"14330
[; <" RA1PPS equ 0E91h ;# ">
"14382
[; <" RA2PPS equ 0E92h ;# ">
"14434
[; <" RA4PPS equ 0E94h ;# ">
"14486
[; <" RA5PPS equ 0E95h ;# ">
"14538
[; <" RB4PPS equ 0E9Ch ;# ">
"14590
[; <" RB5PPS equ 0E9Dh ;# ">
"14642
[; <" RB6PPS equ 0E9Eh ;# ">
"14694
[; <" RB7PPS equ 0E9Fh ;# ">
"14746
[; <" RC0PPS equ 0EA0h ;# ">
"14798
[; <" RC1PPS equ 0EA1h ;# ">
"14850
[; <" RC2PPS equ 0EA2h ;# ">
"14902
[; <" RC3PPS equ 0EA3h ;# ">
"14954
[; <" RC4PPS equ 0EA4h ;# ">
"15006
[; <" RC5PPS equ 0EA5h ;# ">
"15058
[; <" RC6PPS equ 0EA6h ;# ">
"15110
[; <" RC7PPS equ 0EA7h ;# ">
"15162
[; <" CLCDATA equ 0F0Fh ;# ">
"15200
[; <" CLC1CON equ 0F10h ;# ">
"15318
[; <" CLC1POL equ 0F11h ;# ">
"15396
[; <" CLC1SEL0 equ 0F12h ;# ">
"15500
[; <" CLC1SEL1 equ 0F13h ;# ">
"15604
[; <" CLC1SEL2 equ 0F14h ;# ">
"15708
[; <" CLC1SEL3 equ 0F15h ;# ">
"15812
[; <" CLC1GLS0 equ 0F16h ;# ">
"15924
[; <" CLC1GLS1 equ 0F17h ;# ">
"16036
[; <" CLC1GLS2 equ 0F18h ;# ">
"16148
[; <" CLC1GLS3 equ 0F19h ;# ">
"16260
[; <" CLC2CON equ 0F1Ah ;# ">
"16378
[; <" CLC2POL equ 0F1Bh ;# ">
"16456
[; <" CLC2SEL0 equ 0F1Ch ;# ">
"16560
[; <" CLC2SEL1 equ 0F1Dh ;# ">
"16664
[; <" CLC2SEL2 equ 0F1Eh ;# ">
"16768
[; <" CLC2SEL3 equ 0F1Fh ;# ">
"16872
[; <" CLC2GLS0 equ 0F20h ;# ">
"16984
[; <" CLC2GLS1 equ 0F21h ;# ">
"17096
[; <" CLC2GLS2 equ 0F22h ;# ">
"17208
[; <" CLC2GLS3 equ 0F23h ;# ">
"17320
[; <" CLC3CON equ 0F24h ;# ">
"17438
[; <" CLC3POL equ 0F25h ;# ">
"17516
[; <" CLC3SEL0 equ 0F26h ;# ">
"17620
[; <" CLC3SEL1 equ 0F27h ;# ">
"17724
[; <" CLC3SEL2 equ 0F28h ;# ">
"17828
[; <" CLC3SEL3 equ 0F29h ;# ">
"17932
[; <" CLC3GLS0 equ 0F2Ah ;# ">
"18044
[; <" CLC3GLS1 equ 0F2Bh ;# ">
"18156
[; <" CLC3GLS2 equ 0F2Ch ;# ">
"18268
[; <" CLC3GLS3 equ 0F2Dh ;# ">
"18380
[; <" CLC4CON equ 0F2Eh ;# ">
"18498
[; <" CLC4POL equ 0F2Fh ;# ">
"18576
[; <" CLC4SEL0 equ 0F30h ;# ">
"18680
[; <" CLC4SEL1 equ 0F31h ;# ">
"18784
[; <" CLC4SEL2 equ 0F32h ;# ">
"18888
[; <" CLC4SEL3 equ 0F33h ;# ">
"18992
[; <" CLC4GLS0 equ 0F34h ;# ">
"19104
[; <" CLC4GLS1 equ 0F35h ;# ">
"19216
[; <" CLC4GLS2 equ 0F36h ;# ">
"19328
[; <" CLC4GLS3 equ 0F37h ;# ">
"19440
[; <" STATUS_SHAD equ 0FE4h ;# ">
"19472
[; <" WREG_SHAD equ 0FE5h ;# ">
"19492
[; <" BSR_SHAD equ 0FE6h ;# ">
"19512
[; <" PCLATH_SHAD equ 0FE7h ;# ">
"19532
[; <" FSR0L_SHAD equ 0FE8h ;# ">
"19552
[; <" FSR0H_SHAD equ 0FE9h ;# ">
"19572
[; <" FSR1L_SHAD equ 0FEAh ;# ">
"19592
[; <" FSR1H_SHAD equ 0FEBh ;# ">
"19612
[; <" STKPTR equ 0FEDh ;# ">
"19632
[; <" TOSL equ 0FEEh ;# ">
"19652
[; <" TOSH equ 0FEFh ;# ">
"23 JSN_Sensor.c
[; ;JSN_Sensor.c: 23: static JSN_t *lastTrig;
[v _lastTrig `*S979 ~T0 @X0 1 s ]
"24
[; ;JSN_Sensor.c: 24: static unsigned long micros;
[v _micros `ul ~T0 @X0 1 s ]
"25
[; ;JSN_Sensor.c: 25: static JSN_t Sens1, Sens2, Sens3;
[v _Sens1 `S979 ~T0 @X0 1 s ]
[v _Sens2 `S979 ~T0 @X0 1 s ]
[v _Sens3 `S979 ~T0 @X0 1 s ]
"32
[; ;JSN_Sensor.c: 32: uint8_t JSN_Sensor_Init(JSN_t *Sensor, PinName_t trigPin, PinName_t echoPin) {
[v _JSN_Sensor_Init `(uc ~T0 @X0 1 ef3`*S979`E7144`E7144 ]
{
[e :U _JSN_Sensor_Init ]
[v _Sensor `*S979 ~T0 @X0 1 r1 ]
[v _trigPin `E7144 ~T0 @X0 1 r2 ]
[v _echoPin `E7144 ~T0 @X0 1 r3 ]
[f ]
"39
[; ;JSN_Sensor.c: 39:     switch (echoPin) {
[e $U 982  ]
{
"40
[; ;JSN_Sensor.c: 40:         case A2:
[e :U 983 ]
"41
[; ;JSN_Sensor.c: 41:         case A4:
[e :U 984 ]
"42
[; ;JSN_Sensor.c: 42:         case C3:
[e :U 985 ]
"43
[; ;JSN_Sensor.c: 43:         case C5:
[e :U 986 ]
"44
[; ;JSN_Sensor.c: 44:             SetPin(echoPin, 1);
[e ( _SetPin (2 , _echoPin -> -> 1 `i `uc ]
"45
[; ;JSN_Sensor.c: 45:             break;
[e $U 981  ]
"46
[; ;JSN_Sensor.c: 46:         default:
[e :U 987 ]
"47
[; ;JSN_Sensor.c: 47:             printf("ERROR: Invalid echoPin (must be [A2, A4, C3, C5])");
[e ( _printf :s 1C ]
"48
[; ;JSN_Sensor.c: 48:             return 0xFF;
[e ) -> -> 255 `i `uc ]
[e $UE 980  ]
"49
[; ;JSN_Sensor.c: 49:     }
}
[e $U 981  ]
[e :U 982 ]
[e [\ -> _echoPin `ui , $ -> . `E7144 11 `ui 983
 , $ -> . `E7144 1 `ui 984
 , $ -> . `E7144 5 `ui 985
 , $ -> . `E7144 3 `ui 986
 987 ]
[e :U 981 ]
"52
[; ;JSN_Sensor.c: 52:     switch (trigPin) {
[e $U 989  ]
{
"53
[; ;JSN_Sensor.c: 53:         case A5:
[e :U 990 ]
"54
[; ;JSN_Sensor.c: 54:         case C4:
[e :U 991 ]
"55
[; ;JSN_Sensor.c: 55:         case C6:
[e :U 992 ]
"56
[; ;JSN_Sensor.c: 56:         case C7:
[e :U 993 ]
"57
[; ;JSN_Sensor.c: 57:         case B7:
[e :U 994 ]
"58
[; ;JSN_Sensor.c: 58:         case B6:
[e :U 995 ]
"59
[; ;JSN_Sensor.c: 59:         case B5:
[e :U 996 ]
"60
[; ;JSN_Sensor.c: 60:         case B4:
[e :U 997 ]
"61
[; ;JSN_Sensor.c: 61:         case C2:
[e :U 998 ]
"62
[; ;JSN_Sensor.c: 62:         case C1:
[e :U 999 ]
"63
[; ;JSN_Sensor.c: 63:         case C0:
[e :U 1000 ]
"64
[; ;JSN_Sensor.c: 64:         case A1:
[e :U 1001 ]
"65
[; ;JSN_Sensor.c: 65:         case A0:
[e :U 1002 ]
"66
[; ;JSN_Sensor.c: 66:             SetPin(trigPin, 0);
[e ( _SetPin (2 , _trigPin -> -> 0 `i `uc ]
"67
[; ;JSN_Sensor.c: 67:             WritePin(trigPin, 0);
[e ( _WritePin (2 , _trigPin -> -> 0 `i `uc ]
"68
[; ;JSN_Sensor.c: 68:             break;
[e $U 988  ]
"69
[; ;JSN_Sensor.c: 69:         default:
[e :U 1003 ]
"70
[; ;JSN_Sensor.c: 70:             printf("ERROR: Invalid trigPin (must NOT be [A2, A3, A4, C3, C5])");
[e ( _printf :s 2C ]
"71
[; ;JSN_Sensor.c: 71:             return 0xFF;
[e ) -> -> 255 `i `uc ]
[e $UE 980  ]
"72
[; ;JSN_Sensor.c: 72:     }
}
[e $U 988  ]
[e :U 989 ]
[e [\ -> _trigPin `ui , $ -> . `E7144 0 `ui 990
 , $ -> . `E7144 4 `ui 991
 , $ -> . `E7144 6 `ui 992
 , $ -> . `E7144 7 `ui 993
 , $ -> . `E7144 8 `ui 994
 , $ -> . `E7144 17 `ui 995
 , $ -> . `E7144 16 `ui 996
 , $ -> . `E7144 15 `ui 997
 , $ -> . `E7144 14 `ui 998
 , $ -> . `E7144 13 `ui 999
 , $ -> . `E7144 12 `ui 1000
 , $ -> . `E7144 10 `ui 1001
 , $ -> . `E7144 9 `ui 1002
 1003 ]
[e :U 988 ]
"75
[; ;JSN_Sensor.c: 75:     Sensor->distance = 0;
[e = . *U _Sensor 1 -> -> 0 `i `ui ]
"76
[; ;JSN_Sensor.c: 76:     Sensor->echoHighTime = 0;
[e = . *U _Sensor 0 -> -> 0 `i `ui ]
"77
[; ;JSN_Sensor.c: 77:     Sensor->echoPin = echoPin;
[e = . *U _Sensor 3 _echoPin ]
"78
[; ;JSN_Sensor.c: 78:     Sensor->trigPin = trigPin;
[e = . *U _Sensor 2 _trigPin ]
"80
[; ;JSN_Sensor.c: 80:     lastTrig = Sensor;
[e = _lastTrig _Sensor ]
"82
[; ;JSN_Sensor.c: 82:     return 0x00;
[e ) -> -> 0 `i `uc ]
[e $UE 980  ]
"83
[; ;JSN_Sensor.c: 83: }
[e :UE 980 ]
}
"87
[; ;JSN_Sensor.c: 87: void JSN_Sensor_Trig(JSN_t *Sensor) {
[v _JSN_Sensor_Trig `(v ~T0 @X0 1 ef1`*S979 ]
{
[e :U _JSN_Sensor_Trig ]
[v _Sensor `*S979 ~T0 @X0 1 r1 ]
[f ]
"88
[; ;JSN_Sensor.c: 88:     micros = FRT_GetMicros();
[e = _micros ( _FRT_GetMicros ..  ]
"91
[; ;JSN_Sensor.c: 91:     WritePin(Sensor->trigPin, 1);
[e ( _WritePin (2 , . *U _Sensor 2 -> -> 1 `i `uc ]
"94
[; ;JSN_Sensor.c: 94:     while ((FRT_GetMicros() - micros) < 11);
[e $U 1005  ]
[e :U 1006 ]
[e :U 1005 ]
[e $ < - ( _FRT_GetMicros ..  _micros -> -> -> 11 `i `l `ul 1006  ]
[e :U 1007 ]
"97
[; ;JSN_Sensor.c: 97:     WritePin(Sensor->trigPin, 0);
[e ( _WritePin (2 , . *U _Sensor 2 -> -> 0 `i `uc ]
"100
[; ;JSN_Sensor.c: 100:     lastTrig = Sensor;
[e = _lastTrig _Sensor ]
"101
[; ;JSN_Sensor.c: 101:     return;
[e $UE 1004  ]
"102
[; ;JSN_Sensor.c: 102: }
[e :UE 1004 ]
}
"106
[; ;JSN_Sensor.c: 106: unsigned int JSN_Sensor_GetDistance(JSN_t *Sensor) {
[v _JSN_Sensor_GetDistance `(ui ~T0 @X0 1 ef1`*S979 ]
{
[e :U _JSN_Sensor_GetDistance ]
[v _Sensor `*S979 ~T0 @X0 1 r1 ]
[f ]
"111
[; ;JSN_Sensor.c: 111:     Sensor->distance = (unsigned int) (((uint32_t) Sensor->echoHighTime *
[e = . *U _Sensor 1 -> / * -> . *U _Sensor 0 `ul -> -> -> 343 `i `l `ul -> -> << -> 1000 `i -> 1 `i `l `ul `ui ]
"113
[; ;JSN_Sensor.c: 113:     return Sensor->distance;
[e ) . *U _Sensor 1 ]
[e $UE 1008  ]
"114
[; ;JSN_Sensor.c: 114: }
[e :UE 1008 ]
}
"118
[; ;JSN_Sensor.c: 118: JSN_t* JSN_GetLastTrig(void) {
[v _JSN_GetLastTrig `(*S979 ~T0 @X0 1 ef ]
{
[e :U _JSN_GetLastTrig ]
[f ]
"119
[; ;JSN_Sensor.c: 119:     return lastTrig;
[e ) _lastTrig ]
[e $UE 1009  ]
"120
[; ;JSN_Sensor.c: 120: }
[e :UE 1009 ]
}
[v $root$_main `(v ~T0 @X0 0 e ]
"140
[; ;JSN_Sensor.c: 140: int main(void) {
[v _main `(i ~T0 @X0 1 ef ]
{
[e :U _main ]
[f ]
"142
[; ;JSN_Sensor.c: 142:     PIC16_Init();
[e ( _PIC16_Init ..  ]
"148
[; ;JSN_Sensor.c: 148:     if (JSN_Sensor_Init(&Sens1, C6, C5) == 0xFF)
[e $ ! == -> ( _JSN_Sensor_Init (3 , , &U _Sens1 . `E7144 6 . `E7144 3 `i -> 255 `i 1011  ]
"149
[; ;JSN_Sensor.c: 149:         while (1);
[e :U 1013 ]
[e :U 1012 ]
[e $U 1013  ]
[e :U 1014 ]
[e :U 1011 ]
"150
[; ;JSN_Sensor.c: 150:     if (JSN_Sensor_Init(&Sens2, A1, C3) == 0xFF)
[e $ ! == -> ( _JSN_Sensor_Init (3 , , &U _Sens2 . `E7144 10 . `E7144 5 `i -> 255 `i 1015  ]
"151
[; ;JSN_Sensor.c: 151:         while (1);
[e :U 1017 ]
[e :U 1016 ]
[e $U 1017  ]
[e :U 1018 ]
[e :U 1015 ]
"152
[; ;JSN_Sensor.c: 152:     if (JSN_Sensor_Init(&Sens3, B7, A2) == 0xFF)
[e $ ! == -> ( _JSN_Sensor_Init (3 , , &U _Sens3 . `E7144 8 . `E7144 11 `i -> 255 `i 1019  ]
"153
[; ;JSN_Sensor.c: 153:         while (1);
[e :U 1021 ]
[e :U 1020 ]
[e $U 1021  ]
[e :U 1022 ]
[e :U 1019 ]
"156
[; ;JSN_Sensor.c: 156:     unsigned long currMilli = 0;
[v _currMilli `ul ~T0 @X0 1 a ]
[e = _currMilli -> -> -> 0 `i `l `ul ]
"157
[; ;JSN_Sensor.c: 157:     unsigned long prevMilli = 0;
[v _prevMilli `ul ~T0 @X0 1 a ]
[e = _prevMilli -> -> -> 0 `i `l `ul ]
"158
[; ;JSN_Sensor.c: 158:     uint8_t nextSens = 1;
[v _nextSens `uc ~T0 @X0 1 a ]
[e = _nextSens -> -> 1 `i `uc ]
"161
[; ;JSN_Sensor.c: 161:     SetPin(C0, 0);
[e ( _SetPin (2 , . `E7144 12 -> -> 0 `i `uc ]
"162
[; ;JSN_Sensor.c: 162:     WritePin(C0, 0);
[e ( _WritePin (2 , . `E7144 12 -> -> 0 `i `uc ]
"164
[; ;JSN_Sensor.c: 164:     JSN_Sensor_Trig(&Sens3);
[e ( _JSN_Sensor_Trig (1 &U _Sens3 ]
"165
[; ;JSN_Sensor.c: 165:     currMilli = FRT_GetMillis();
[e = _currMilli ( _FRT_GetMillis ..  ]
"166
[; ;JSN_Sensor.c: 166:     prevMilli = currMilli;
[e = _prevMilli _currMilli ]
"168
[; ;JSN_Sensor.c: 168:     while (1) {
[e :U 1024 ]
{
"170
[; ;JSN_Sensor.c: 170:         currMilli = FRT_GetMillis();
[e = _currMilli ( _FRT_GetMillis ..  ]
"173
[; ;JSN_Sensor.c: 173:         if ((currMilli - prevMilli) >= 50) {
[e $ ! >= - _currMilli _prevMilli -> -> -> 50 `i `l `ul 1026  ]
{
"178
[; ;JSN_Sensor.c: 178:             switch (nextSens) {
[e $U 1028  ]
{
"179
[; ;JSN_Sensor.c: 179:                 case 1:
[e :U 1029 ]
"181
[; ;JSN_Sensor.c: 181:                     JSN_Sensor_Trig(&Sens1);
[e ( _JSN_Sensor_Trig (1 &U _Sens1 ]
"182
[; ;JSN_Sensor.c: 182:                     printf("%u", JSN_Sensor_GetDistance(&Sens3));
[e ( _printf , (. :s 3C ( _JSN_Sensor_GetDistance (1 &U _Sens3 ]
"183
[; ;JSN_Sensor.c: 183:                     nextSens = 2;
[e = _nextSens -> -> 2 `i `uc ]
"184
[; ;JSN_Sensor.c: 184:                     break;
[e $U 1027  ]
"185
[; ;JSN_Sensor.c: 185:                 case 2:
[e :U 1030 ]
"187
[; ;JSN_Sensor.c: 187:                     JSN_Sensor_Trig(&Sens2);
[e ( _JSN_Sensor_Trig (1 &U _Sens2 ]
"188
[; ;JSN_Sensor.c: 188:                     printf("%u", JSN_Sensor_GetDistance(&Sens1));
[e ( _printf , (. :s 4C ( _JSN_Sensor_GetDistance (1 &U _Sens1 ]
"189
[; ;JSN_Sensor.c: 189:                     nextSens = 3;
[e = _nextSens -> -> 3 `i `uc ]
"190
[; ;JSN_Sensor.c: 190:                     break;
[e $U 1027  ]
"191
[; ;JSN_Sensor.c: 191:                 case 3:
[e :U 1031 ]
"193
[; ;JSN_Sensor.c: 193:                     JSN_Sensor_Trig(&Sens3);
[e ( _JSN_Sensor_Trig (1 &U _Sens3 ]
"194
[; ;JSN_Sensor.c: 194:                     printf("%u", JSN_Sensor_GetDistance(&Sens2));
[e ( _printf , (. :s 5C ( _JSN_Sensor_GetDistance (1 &U _Sens2 ]
"195
[; ;JSN_Sensor.c: 195:                     nextSens = 1;
[e = _nextSens -> -> 1 `i `uc ]
"196
[; ;JSN_Sensor.c: 196:             }
}
[e $U 1027  ]
[e :U 1028 ]
[e [\ -> _nextSens `i , $ -> 1 `i 1029
 , $ -> 2 `i 1030
 , $ -> 3 `i 1031
 1027 ]
[e :U 1027 ]
"199
[; ;JSN_Sensor.c: 199:             if ((Sens1.distance < 500) || (Sens2.distance < 500)) {
[e $ ! || < . _Sens1 1 -> -> 500 `i `ui < . _Sens2 1 -> -> 500 `i `ui 1032  ]
{
"200
[; ;JSN_Sensor.c: 200:                 WritePin(C0, 1);
[e ( _WritePin (2 , . `E7144 12 -> -> 1 `i `uc ]
"201
[; ;JSN_Sensor.c: 201:             } else {
}
[e $U 1033  ]
[e :U 1032 ]
{
"202
[; ;JSN_Sensor.c: 202:                 WritePin(C0, 0);
[e ( _WritePin (2 , . `E7144 12 -> -> 0 `i `uc ]
"203
[; ;JSN_Sensor.c: 203:             }
}
[e :U 1033 ]
"206
[; ;JSN_Sensor.c: 206:             prevMilli = currMilli;
[e = _prevMilli _currMilli ]
"207
[; ;JSN_Sensor.c: 207:         }
}
[e :U 1026 ]
"208
[; ;JSN_Sensor.c: 208:     }
}
[e :U 1023 ]
[e $U 1024  ]
[e :U 1025 ]
"210
[; ;JSN_Sensor.c: 210:     return 0;
[e ) -> 0 `i ]
[e $UE 1010  ]
"211
[; ;JSN_Sensor.c: 211: }
[e :UE 1010 ]
}
[p f _printf 8389632 ]
[a 3C 37 117 0 ]
[a 4C 37 117 0 ]
[a 5C 37 117 0 ]
[a 2C 69 82 82 79 82 58 32 73 110 118 97 108 105 100 32 116 114 105 103 80 105 110 32 40 109 117 115 116 32 78 79 84 32 98 101 32 91 65 50 44 32 65 51 44 32 65 52 44 32 67 51 44 32 67 53 93 41 0 ]
[a 1C 69 82 82 79 82 58 32 73 110 118 97 108 105 100 32 101 99 104 111 80 105 110 32 40 109 117 115 116 32 98 101 32 91 65 50 44 32 65 52 44 32 67 51 44 32 67 53 93 41 0 ]
