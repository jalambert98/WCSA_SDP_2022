/* 
 * File:    BatteryMonitor.c
 * Author:  Jack Lambert     <joalambe@ucsc.edu>
 * Project: WCSA_SDP_2022
 *
 * NOTE: ADC code originally generated by Microchip Code Configurator (MCC) 
 *       and then further modified by Jack Lambert.
 *       BatteryMonitor implementations were written from scratch.
 * 
 * Created on May 2, 2022, 3:10 PM
 */
//------------------------------------------------------------------------------

#ifndef BATTERYMONITOR_H
#define	BATTERYMONITOR_H

#include <xc.h>
#include <stdint.h>
#include <stdbool.h>
#include "device_config.h"


// ADC(vBat) == pin[RA5]
//==============================================================================
//--------------------------------- TYPEDEFS -----------------------------------
//==============================================================================

// resulting size of an A/D conversion
typedef uint16_t adc_result_t;

//------------------------------------------------------------------------------

// resulting datatype of a Double ADC conversion
typedef struct {
    adc_result_t adcResult1;
    adc_result_t adcResult2;
} adc_sync_double_result_t;

//------------------------------------------------------------------------------
/** ADC Channel Definitions

 @Summary
   Defines the channels available for conversion.

 @Description
   This datatype defines the channels that are available for the module to use.
 */
typedef enum {
    vBat = 0x5,
    channel_AVSS = 0x3C,
    channel_Temp = 0x3D,
    channel_DAC1 = 0x3E,
    channel_FVR = 0x3F
} adc_channel_t;


//==============================================================================
//------------------------------ PUBLIC LIBRARY --------------------------------
//==============================================================================
/**
 * @funct   BatteryMonitor_Init()
 * @param   None
 * @return  None
 * @brief   Initializes the vBat ADC pin [RA5] and sets up the BatteryMonitor
 * @author  Jack Lambert, 2022.02.07 */
void BatteryMonitor_Init(void);

//------------------------------------------------------------------------------
/**
  @Summary
    Initializes the ADC

  @Description
    This routine initializes the Initializes the ADC.
    This routine must be called before any other ADC routine is called.
    This routine should only be called once during system initialization.

  @Preconditions
    None

  @Param
    None

  @Returns
    None
 */
void ADC_Initialize(void);

//------------------------------------------------------------------------------
/**
  @Summary
    Allows selection of a channel for conversion

  @Description
    This routine is used to select desired channel for conversion.
    available

  @Preconditions
    ADC_Initialize() function should have been called before calling this function.

  @Returns
    None

  @Param
    Pass in required channel number
    "For available channel refer to enum under adc.h file"
 */
void ADC_SelectChannel(adc_channel_t channel);

//------------------------------------------------------------------------------
/**
  @Summary
    Starts conversion

  @Description
    This routine is used to start conversion of desired channel.
    
  @Preconditions
    ADC_Initialize() function should have been called before calling this function.

  @Returns
    None

  @Param
    None
 */
void ADC_StartConversion(void);

//------------------------------------------------------------------------------
/**
  @Summary
    Returns true when the conversion is completed otherwise false.

  @Description
    This routine is used to determine if conversion is completed.
    When conversion is complete routine returns true. It returns false otherwise.

  @Preconditions
    ADC_Initialize() and ADC_StartConversion(void)
    function should have been called before calling this function.

  @Returns
    true  - If conversion is complete
    false - If conversion is not completed

  @Param
    None
 */
bool ADC_IsConversionDone(void);

//------------------------------------------------------------------------------
/**
  @Summary
    Returns the ADC conversion value.

  @Description
    This routine is used to get the analog to digital converted value. This
    routine gets converted values from the channel specified.

  @Preconditions
    This routine returns the conversion value only after the conversion is complete.
    Completion status can be checked using
    ADC_IsConversionDone() routine.

  @Returns
    Returns the converted value.

  @Param
    None
 */
adc_result_t ADC_GetConversionResult(void);

//------------------------------------------------------------------------------
/**
  @Summary
    Returns the ADC conversion value
    also allows selection of a channel for conversion.

  @Description
    This routine is used to select desired channel for conversion
    and to get the analog to digital converted value.

  @Preconditions
    ADC_Initialize() function should have been called before calling this function.

  @Returns
    Returns the converted value.

  @Param
    Pass in required channel number.
    "For available channel refer to enum under adc.h file"
 */
adc_result_t ADC_GetConversion(adc_channel_t channel);

//------------------------------------------------------------------------------
/**
  @Summary
    Implements ISR

  @Description
    This routine is used to implement the ISR for the interrupt-driven
    implementations.

  @Returns
    None

  @Param
    None
 */
void ADC_ISR(void);

//------------------------------------------------------------------------------
/**
  @Description
    Returns value of most recently completed ADC reading/conversion

  @Returns
    adc_result_t (uint16_t) adcReading

  @Param
    None
 */
adc_result_t ADC_GetCurrReading(void);

//------------------------------------------------------------------------------

#endif	/* BATTERYMONITOR_H */

//==============================================================================
//--------------------------------END OF FILE-----------------------------------
//==============================================================================
